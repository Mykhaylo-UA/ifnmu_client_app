[{"/home/mykhailo/WebstormProjects/ifnmu_client/src/index.js":"1","/home/mykhailo/WebstormProjects/ifnmu_client/src/reportWebVitals.js":"2","/home/mykhailo/WebstormProjects/ifnmu_client/src/App.js":"3","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/LayoutPage/LayoutPage.js":"4","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Schedule/Schedule.js":"5","/home/mykhailo/WebstormProjects/ifnmu_client/src/GlobalVar.js":"6","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Home/Home.js":"7","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Directories/Directories.js":"8","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Directory/Directory.js":"9","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Files/Files.js":"10","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Instruction/Instruction.js":"11","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Admin/Admin.js":"12","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/AdminWeek/AdminWeek.js":"13","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/AdminFolder/AdminFolder.js":"14","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/AdminFile/AdminFile.js":"15","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/SubDirectory/SubDirectory.js":"16"},{"size":500,"mtime":1608829370510,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":1608829370510,"results":"19","hashOfConfig":"18"},{"size":2389,"mtime":1610628041164,"results":"20","hashOfConfig":"18"},{"size":3202,"mtime":1610637603888,"results":"21","hashOfConfig":"18"},{"size":36090,"mtime":1610639386701,"results":"22","hashOfConfig":"18"},{"size":1815,"mtime":1610640467745,"results":"23","hashOfConfig":"18"},{"size":7796,"mtime":1610557964710,"results":"24","hashOfConfig":"18"},{"size":9430,"mtime":1610395778700,"results":"25","hashOfConfig":"18"},{"size":6626,"mtime":1610631748824,"results":"26","hashOfConfig":"18"},{"size":4026,"mtime":1610631703284,"results":"27","hashOfConfig":"18"},{"size":3837,"mtime":1610395744634,"results":"28","hashOfConfig":"18"},{"size":2720,"mtime":1609882086984,"results":"29","hashOfConfig":"18"},{"size":2669,"mtime":1610019026993,"results":"30","hashOfConfig":"18"},{"size":3059,"mtime":1610021954857,"results":"31","hashOfConfig":"18"},{"size":2971,"mtime":1610022105460,"results":"32","hashOfConfig":"18"},{"size":3697,"mtime":1610631721197,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"978dnz",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"36"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"36"},"/home/mykhailo/WebstormProjects/ifnmu_client/src/index.js",[],["78","79"],"/home/mykhailo/WebstormProjects/ifnmu_client/src/reportWebVitals.js",[],"/home/mykhailo/WebstormProjects/ifnmu_client/src/App.js",[],"/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/LayoutPage/LayoutPage.js",["80","81","82","83","84","85","86"],"import React, {useState, useEffect} from \"react\"\nimport './LayoutPage.css';\n\nimport { Layout, Menu, Affix, Drawer} from 'antd';\nimport {\n    DesktopOutlined,\n    PieChartOutlined,\n    FileOutlined,\n    TranslationOutlined,\n    CloseCircleOutlined\n} from '@ant-design/icons';\n\nimport {useHistory, useLocation} from \"react-router-dom\"\n\nimport {CSSTransition} from \"react-transition-group\"\n\nconst { Header, Content, Footer, Sider } = Layout;\n\nconst LayoutPage = props => {\n    const location = useLocation();\n    const history = useHistory();\n\n    const pushTo = (location) => {\n      history.push(location);\n    }\n\n    const [collapsed, setCollapsed]= useState(true);\n    const [colWidth, setColWidth] = useState(0)\n\n    const onCollapse = collapsed => setCollapsed(collapsed)\n    const onClose = () => {\n        setCollapsed(true)\n      };\n    \n\n    const onBreakpoint = broken =>{\n        if(broken) setColWidth(0);\n        else setColWidth(80);\n        console.log(broken)\n\n    }\n\n    return (\n        <Layout style={{ minHeight: '100vh', overflowX: (colWidth === 0 ? collapsed ? \"auto\" : \"hidden\" : \"auto\") }}>\n            {colWidth == 0 ?<CSSTransition in={collapsed} timeout={300} classNames=\"mask\">\n                <div onClick={onClose} className={\"mask\"}></div>\n            </CSSTransition>\n            : null }\n            <Sider collapsible collapsed={collapsed} onCollapse={onCollapse} breakpoint=\"md\" onBreakpoint={onBreakpoint} collapsedWidth={colWidth}\n            >\n                {/*<div className=\"logo\" />*/}\n                    <Menu style={{position: \"\", top: 0, width: collapsed?colWidth : 200}} theme=\"dark\" defaultSelectedKeys={[location.pathname]} mode=\"inline\" mask={true}>\n                        <Menu.Item key=\"/\" icon={<PieChartOutlined />} onClick={()=>pushTo(\"/\")}>\n                            Розклад\n                        </Menu.Item>\n                        {/*<Menu.Item key=\"/schedule\" icon={<DesktopOutlined />} onClick={()=>pushTo(\"/schedule\")}>\n                            Додати розклад\n                        </Menu.Item>\n                        <Menu.Item key=\"/directories\" icon={<FileOutlined />} onClick={()=>pushTo(\"/directories\")}>\n                            Додати папку/файл\n        </Menu.Item>*/}\n                        <Menu.Item key=\"/instruction\" icon={<TranslationOutlined />} onClick={()=>pushTo(\"/instruction\")}>\n                            Інструкція\n                        </Menu.Item>\n                    </Menu>\n            </Sider>\n            <Layout className=\"site-layout\">\n                <Header className=\"site-layout-background\" style={{ padding: 0, height: 42, width: \"100%\"}} >\n                    {/*<div className=\"logo\" />*/}\n                </Header>\n                <Content style={{ margin: '5px 5px', minWidth: \"310px\"}}>\n                    <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 100 }}>\n                        {props.children}\n                    </div>\n                </Content>\n                <Footer style={{ textAlign: 'center' }}>B M Y ©2020</Footer>\n            </Layout>\n        </Layout>\n    );\n}\n\nexport default LayoutPage;\n","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Schedule/Schedule.js",["87","88","89"],"import React, { useState, useEffect } from 'react';\nimport \"./Schedule.css\"\nimport {Faculty, minMaxDate, URL_API} from \"../../GlobalVar\"\n\nimport { Form, Input, Button, Select, DatePicker, Row, Col, notification, Table, message } from 'antd';\nimport ColumnGroup from 'antd/lib/table/ColumnGroup';\nimport Column from 'antd/lib/table/Column';\n\nimport axios from \"axios\"\n\n\nconst Schedule = () => {\n\n\n\n    const [form] = Form.useForm();\n\n    const [statusDays, setStatusDays] = useState(0)\n\n    const [course, setCourse] = useState(1)\n    const [typeSchedule, setTypeSchedule] = useState(0);\n    const [faculty, setFaculty] = useState(0);\n    const [numberWeek, setNumberWeek] = useState(1);\n    const [startDate, setStartDate] = useState(null)\n    const [errorDate, setErrorDate] = useState(false)\n\n    const [nameLessons, setNameLessons] = useState([\"\"])\n    const [days, setDays] = useState([\n        {dayofweek: 1, lessons: [\n            [{string:\"\", number:1},{string:\"\", number:2},{string:\"\", number:3},{string:\"\", number:4}]]\n        },\n        {dayofweek: 2, lessons: [\n            [{string:\"\", number:1},{string:\"\", number:2},{string:\"\", number:3},{string:\"\", number:4}]]\n        },\n        {dayofweek: 3, lessons: [\n            [{string:\"\", number:1},{string:\"\", number:2},{string:\"\", number:3},{string:\"\", number:4}]]\n        },\n        {dayofweek: 4, lessons: [\n            [{string:\"\", number:1},{string:\"\", number:2},{string:\"\", number:3},{string:\"\", number:4}]]\n        },\n        {dayofweek: 5, lessons: [\n            [{string:\"\", number:1},{string:\"\", number:2},{string:\"\", number:3},{string:\"\", number:4}]]\n        }\n    ])\n\n    const [lectionInfo, setLectionInfo] = useState(\"\")\n\n    const [loadingSchedule, setLoadingSchedule] = useState(false)\n\n    const [loadTable, setLoadTable] = useState(false);\n    const [addStatus, setAddStatus] = useState(false)\n\n    const [statusAddOrEdit, setStatusAddOrEdit] = useState(0)\n\n    const courseChangeHandler = value=>{\n        setLoadTable(false);\n        if(value.target.value === \"\")\n        {\n            setCourse(1);\n        }\n        else setCourse(value.target.value)\n    }\n    const typeScheduleChangeHandler = value => {\n        setLoadTable(false);\n        setTypeSchedule(value)\n    }\n    const facultyChangeHandler = value => {\n        setFaculty(value)\n    }\n    const numberWeekChangeHandler = value => {\n        setLoadTable(false);\n        setNumberWeek(value)\n    }\n    const startDateChangeHandler = (date, dateString) => {\n        setLoadTable(false);\n        if(date === null) return false;\n        if(date._d < minMaxDate.min || date._d > minMaxDate.max)\n        {\n            notification.open({\n                message: 'Дата',\n                description:\n                  \"Тижні повинні входити в рамки \"+minMaxDate.min.toLocaleDateString()+\"-\"+minMaxDate.max.toLocaleDateString(),\n              });\n            setErrorDate(true)\n        }\n        else{\n            let day = date._d.getDay();\n\n            if(day > 1){\n                date._d.setDate(date._d.getDate() - (day - 1));\n            }\n            else if (day < 1){\n                date._d.setDate(date._d.getDate() + 1);\n            }\n    \n            setStartDate(date._d)\n            setErrorDate(false)\n\n            console.log(date._d)\n        }\n      }\n\n    const clickLoadHandler=()=>{\n        setLoadingSchedule(true)\n        setLoadTable(false)\n\n        if(typeSchedule === 1)\n        {\n        \n            axios.get(URL_API+\"/schedule/getShortSchedule/?course=\"+course+\"&faculty=\"+faculty+\"&numberWeek=\"+numberWeek).then(response=>{\n                console.log(response)\n                setLoadingSchedule(false)\n\n                let data = response.data;\n                console.log(data)\n\n                setNameLessons(data.nameLessons);\n                setDays(data.days)\n\n                setStatusDays(3)\n        \n        \n        })\n            .catch(error=>{\n            if(error.response == undefined) {\n                message.error(\"Помилка сервера\")\n            \n                return \n            }\n            if(error.response.status === 404)\n            {\n                setStatusDays(2)\n                setNameLessons([\"\"])\n                setDays([\n                    {dayofweek: 1, lessons: [\n                        [{string:\"\", number:1},{string:\"\", number:2},{string:\"\", number:3},{string:\"\", number:4}]]\n                    },\n                    {dayofweek: 2, lessons: [\n                        [{string:\"\", number:1},{string:\"\", number:2},{string:\"\", number:3},{string:\"\", number:4}]]\n                    },\n                    {dayofweek: 3, lessons: [\n                        [{string:\"\", number:1},{string:\"\", number:2},{string:\"\", number:3},{string:\"\", number:4}]]\n                    },\n                    {dayofweek: 4, lessons: [\n                        [{string:\"\", number:1},{string:\"\", number:2},{string:\"\", number:3},{string:\"\", number:4}]]\n                    },\n                    {dayofweek: 5, lessons: [\n                        [{string:\"\", number:1},{string:\"\", number:2},{string:\"\", number:3},{string:\"\", number:4}]]\n                    }\n                ])\n                \n            }\n            else{\n                message.error(error.response.message)\n            }\n\n        })\n        }\n        else{\n            axios.get(URL_API+\"/schedule/getFullSchedule/?course=\"+course+\"&faculty=\"+faculty+\"&startDate=\"+startDate.toLocaleDateString()).then(response=>{\n                console.log(response)\n                setLoadingSchedule(false)\n\n                let data = response.data;\n                console.log(data)\n\n                setNameLessons(data.nameLessons);\n                setDays(data.days)\n\n                setStatusDays(4)\n        \n        \n        })\n            .catch(error=>{\n            if(error.response.status === 404)\n            {\n                let dates=[\n                    new Date(startDate.getFullYear(), startDate.getMonth(),startDate.getDate()),\n                    new Date(startDate.getFullYear(), startDate.getMonth(),startDate.getDate()+1),\n                    new Date(startDate.getFullYear(), startDate.getMonth(),startDate.getDate()+2),\n                    new Date(startDate.getFullYear(), startDate.getMonth(),startDate.getDate()+3),\n                    new Date(startDate.getFullYear(), startDate.getMonth(),startDate.getDate()+4),\n                ]\n\n                setStatusDays(1)\n                setNameLessons(()=>[\"\"])\n                setDays(prev=>[\n                    {datetime: dates[0].getFullYear()+\"-\"+(dates[0].getMonth() < 10? \"0\"+(dates[0].getMonth()+1): dates[0].getMonth()+1)+\"-\"+(dates[0].getDate() < 10 ? \"0\"+dates[0].getDate(): dates[0].getDate()), lessons: [\n                        [{string:\"\", number:1},{string:\"\", number:3}]]\n                    },\n                    {datetime: dates[1].getFullYear()+\"-\"+(dates[0].getMonth() < 10? \"0\"+(dates[0].getMonth()+1): dates[0].getMonth()+1)+\"-\"+(dates[1].getDate() < 10 ? \"0\"+dates[1].getDate(): dates[1].getDate()), lessons: [\n                        [{string:\"\", number:1},{string:\"\", number:3}]]\n                    },\n                    {datetime: dates[2].getFullYear()+\"-\"+(dates[0].getMonth() < 10? \"0\"+(dates[0].getMonth()+1): dates[0].getMonth()+1)+\"-\"+(dates[2].getDate() < 10 ? \"0\"+dates[2].getDate(): dates[2].getDate()), lessons: [\n                        [{string:\"\", number:1},{string:\"\", number:3}]]\n                    },\n                    {datetime: dates[3].getFullYear()+\"-\"+(dates[0].getMonth() < 10? \"0\"+(dates[0].getMonth()+1): dates[0].getMonth()+1)+\"-\"+(dates[3].getDate() < 10 ? \"0\"+dates[3].getDate(): dates[3].getDate()), lessons: [\n                        [{string:\"\", number:1},{string:\"\", number:3}]]\n                    },\n                    {datetime: dates[4].getFullYear()+\"-\"+(dates[0].getMonth() < 10? \"0\"+(dates[0].getMonth()+1): dates[0].getMonth()+1)+\"-\"+(dates[4].getDate() < 10 ? \"0\"+dates[4].getDate(): dates[4].getDate()), lessons: [\n                        [{string:\"\", number:1},{string:\"\", number:3}]]\n                    }\n                ])\n                \n            }\n            else{\n                message.error(error.response.message)\n            }\n\n        })\n        }\n    }\n\n    const nameLessonsChangeHandler = (value, index)=>{\n        let s = nameLessons.slice();\n\n        s[index] = value.target.value;\n\n        setNameLessons(s)\n    }\n\n    const addRowHandler = ()=>{\n        setNameLessons(nameLessons.concat(\"\"))\n\n        let d = [...days];\n\n        for(let a=0; a< 5; a++){\n            if(typeSchedule === 1) d[a].lessons.push([{string:\"\", number:1},{string:\"\", number:2},{string:\"\", number:3},{string:\"\", number:4}])\n            else d[a].lessons.push([{string:\"\", number:1},{string:\"\", number:3}])\n        }\n\n        setDays(d)\n\n        if(typeSchedule === 1) setData(data.concat({\n            key: nameLessons.length+1,\n            name: <Input placeholder={1} style={{margin: 0}} onBlur={e=>nameLessonsChangeHandler(e, nameLessons.length)}/>,\n            11: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, nameLessons.length+1, 1)}/>,\n          12: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, nameLessons.length+1, 2)}/>,\n          13: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, nameLessons.length+1, 3)}/>,\n          14: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, nameLessons.length+1, 4)}/>,\n          21: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, nameLessons.length+1, 1)}/>,\n          22: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, nameLessons.length+1, 2)}/>,\n          23: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, nameLessons.length+1, 3)}/>,\n          24: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, nameLessons.length+1, 4)}/>,\n          31: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, nameLessons.length+1, 1)}/>,\n          32: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, nameLessons.length+1, 2)}/>,\n          33: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, nameLessons.length+1, 3)}/>,\n          34: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, nameLessons.length+1, 4)}/>,\n          41: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, nameLessons.length+1, 1)}/>,\n          42: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, nameLessons.length+1, 2)}/>,\n          43: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, nameLessons.length+1, 3)}/>,\n          44: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, nameLessons.length+1, 4)}/>,\n          51: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, nameLessons.length+1, 1)}/>,\n          52: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, nameLessons.length+1, 2)}/>,\n          53: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, nameLessons.length+1, 3)}/>,\n          54: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, nameLessons.length+1, 4)}/>\n          }))\n          else setData(data.concat({\n            key: nameLessons.length+1,\n            name: <Input placeholder={1} style={{margin: 0}} onBlur={e=>nameLessonsChangeHandler(e, nameLessons.length)}/>,\n            11: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, nameLessons.length+1, 1)}/>,\n          13: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, nameLessons.length+1, 2)}/>,\n          \n          21: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, nameLessons.length+1, 1)}/>,\n          23: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, nameLessons.length+1, 2)}/>,\n         \n          31: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, nameLessons.length+1, 1)}/>,\n          33: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, nameLessons.length+1, 2)}/>,\n          \n          41: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, nameLessons.length+1, 1)}/>,\n          43: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, nameLessons.length+1, 2)}/>,\n          \n          51: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, nameLessons.length+1, 1)}/>,\n          53: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, nameLessons.length+1, 2)}/>,\n          \n          }))\n    }\n\n    const inputChangeHandler = (e, dayOfWeek, numberName, numberLesson) =>{\n        let d = [...days]\n\n        d[dayOfWeek-1].lessons[numberName-1][numberLesson-1].string = e.target.value;\n\n        setDays(d);\n\n        console.log(\"days change\", days)\n    }\n\n    const [data, setData] = useState([\n        {\n          key: 1,\n          name: <Input placeholder={1} onBlur={e=>nameLessonsChangeHandler(e, 0)}/>,\n          11: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, 1, 1)}/>,\n          12: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, 1, 2)}/>,\n          13: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, 1, 3)}/>,\n          14: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, 1, 4)}/>,\n          21: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, 1, 1)}/>,\n          22: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, 1, 2)}/>,\n          23: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, 1, 3)}/>,\n          24: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, 1, 4)}/>,\n          31: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, 1, 1)}/>,\n          32: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, 1, 2)}/>,\n          33: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, 1, 3)}/>,\n          34: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, 1, 4)}/>,\n          41: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, 1, 1)}/>,\n          42: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, 1, 2)}/>,\n          43: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, 1, 3)}/>,\n          44: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, 1, 4)}/>,\n          51: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, 1, 1)}/>,\n          52: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, 1, 2)}/>,\n          53: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, 1, 3)}/>,\n          54: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, 1, 4)}/>\n        },\n      ]);\n\n\n\n    const addSchedule =() =>{\n        for(let a=0; a< nameLessons.length; a++){\n            if(nameLessons[a]==\"\"){\n                message.error(\"Пусте значення поля | індекс \"+a)\n                return\n            }\n        }\n\n        const hide = message.loading('Додаємо розклад', 0);\n        setAddStatus(true)\n\n        if(typeSchedule===1)\n        {\n            axios.post(URL_API+\"/schedule/addShortSchedule/?course=\"+course+\"&faculty=\"+faculty+\"&numberWeek=\"+numberWeek+\"&lectionInfo=\"+lectionInfo, {\"nameLessons\": nameLessons, \"days\": days}).then(response=>{\n                hide();\n                message.success(\"Розклад додано успішно\")\n                setAddStatus(false)\n                setStatusAddOrEdit(1)\n                \n            }).catch(error=> {\n                setAddStatus(false)\n                message.error(error.response.message)\n            })\n        }\n        else{\n            axios.post(URL_API+\"/schedule/addFullSchedule/?course=\"+course+\"&faculty=\"+faculty+\"&lectionInfo=\"+lectionInfo, {\"nameLessons\": nameLessons, \"days\": days}).then(response=>{\n                hide();\n                message.success(\"Розклад додано успішно\")\n                setAddStatus(false)\n                setStatusAddOrEdit(1)\n                \n            }).catch(error=> {\n                setAddStatus(false)\n                message.error(error.response.message)\n            })\n        }\n    }\n\n    const editSchedule = () =>{\n        const hide = message.loading('Змінюємо розклад', 0);\n        setAddStatus(true)\n\n        if(typeSchedule===1)\n        {\n            axios.put(URL_API+\"/schedule/editShortSchedule/?course=\"+course+\"&faculty=\"+faculty+\"&numberWeek=\"+numberWeek+\"&lectionInfo=\"+lectionInfo, {\"nameLessons\": nameLessons, \"days\": days}).then(response=>{\n                hide();\n                message.success(\"Розклад змінено успішно\")\n                setAddStatus(false)\n                \n            }).catch(error=> {\n                setAddStatus(false)\n                message.error(error.response.message)\n            })\n        }\n        else{\n            axios.put(URL_API+\"/schedule/editFullSchedule/?course=\"+course+\"&faculty=\"+faculty+\"&lectionInfo=\"+lectionInfo+\"&startDate=\"+startDate.toLocaleDateString(), {\"nameLessons\": nameLessons, \"days\": days}).then(response=>{\n                hide();\n                message.success(\"Розклад змінено успішно\")\n                setAddStatus(false)\n                \n            }).catch(error=> {\n                setAddStatus(false)\n                message.error(error.response.message)\n            })\n        }\n    }\n\n    useEffect(()=>{\n        if(statusDays===1){\n            setData([{\n                key: 1,\n                name: <Input placeholder={1} onBlur={e=>nameLessonsChangeHandler(e, 0)}/>,\n                11: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, 1, 1)}/>,\n                13: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, 1, 2)}/>,\n                21: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, 1, 1)}/>,\n                23: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, 1, 2)}/>,\n                31: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, 1, 1)}/>,\n                33: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, 1, 2)}/>,\n                41: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, 1, 1)}/>,\n                43: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, 1, 2)}/>,\n                51: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, 1, 1)}/>,\n                53: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, 1, 2)}/>,\n                \n              }])\n\n            setStatusAddOrEdit(0)\n\n            setLoadTable(true)\n\n            message.info(\"Даного розкладу не існує, потрібно створити новий\")\n\n            setLoadingSchedule(false)\n\n            setStatusDays(0)\n            \n        }\n        else if(statusDays === 2){\n            setData([{\n                key: 1,\n                name: <Input placeholder={1} onBlur={e=>nameLessonsChangeHandler(e, 0)}/>,\n                11: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, 1, 1)}/>,\n                12: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, 1, 2)}/>,\n                13: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, 1, 3)}/>,\n                14: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, 1, 4)}/>,\n                21: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, 1, 1)}/>,\n                22: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, 1, 2)}/>,\n                23: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, 1, 3)}/>,\n                24: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, 1, 4)}/>,\n                31: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, 1, 1)}/>,\n                32: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, 1, 2)}/>,\n                33: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, 1, 3)}/>,\n                34: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, 1, 4)}/>,\n                41: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, 1, 1)}/>,\n                42: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, 1, 2)}/>,\n                43: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, 1, 3)}/>,\n                44: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, 1, 4)}/>,\n                51: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, 1, 1)}/>,\n                52: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, 1, 2)}/>,\n                53: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, 1, 3)}/>,\n                54: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, 1, 4)}/>\n              }])\n\n            setStatusAddOrEdit(0)\n\n            setLoadTable(true)\n\n            message.info(\"Даного розкладу не існує, потрібно створити новий\")\n\n            setLoadingSchedule(false)\n\n            setStatusDays(0)\n        }\n        else if(statusDays === 3){\n            let newTableData = [];\n\n            for(let o=0; o < nameLessons.length; o++){\n                newTableData = newTableData.concat({\n                    key: o,\n                    name: <Input placeholder={1} style={{margin: 0}} onBlur={e=>nameLessonsChangeHandler(e, o)} defaultValue={nameLessons[o]}/>,\n                    11: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, o+1, 1)} defaultValue={days[0].lessons[o][0].string}/>,\n                    12: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, o+1, 2)} defaultValue={days[0].lessons[o][1].string}/>,\n                    13: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, o+1, 3)} defaultValue={days[0].lessons[o][2].string}/>,\n                    14: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, o+1, 4)} defaultValue={days[0].lessons[o][3].string}/>,\n                    21: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, o+1, 1)} defaultValue={days[1].lessons[o][0].string}/>,\n                    22: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, o+1, 2)} defaultValue={days[1].lessons[o][1].string}/>,\n                    23: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, o+1, 3)} defaultValue={days[1].lessons[o][2].string}/>,\n                    24: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, o+1, 4)} defaultValue={days[1].lessons[o][3].string}/>,\n                    31: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, o+1, 1)} defaultValue={days[2].lessons[o][0].string}/>,\n                    32: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, o+1, 2)} defaultValue={days[2].lessons[o][1].string}/>,\n                    33: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, o+1, 3)} defaultValue={days[2].lessons[o][2].string}/>,\n                    34: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, o+1, 4)} defaultValue={days[2].lessons[o][3].string}/>,\n                    41: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, o+1, 1)} defaultValue={days[3].lessons[o][0].string}/>,\n                    42: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, o+1, 2)} defaultValue={days[3].lessons[o][1].string}/>,\n                    43: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, o+1, 3)} defaultValue={days[3].lessons[o][2].string}/>,\n                    44: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, o+1, 4)} defaultValue={days[3].lessons[o][3].string}/>,\n                    51: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, o+1, 1)} defaultValue={days[4].lessons[o][0].string}/>,\n                    52: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, o+1, 2)} defaultValue={days[4].lessons[o][1].string}/>,\n                    53: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, o+1, 3)} defaultValue={days[4].lessons[o][2].string}/>,\n                    54: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, o+1, 4)} defaultValue={days[4].lessons[o][3].string}/>\n                })\n            }\n\n            setStatusAddOrEdit(1)\n            \n            setData(newTableData)\n\n            setLoadTable(true)\n        }\n        else if(statusDays===4){\n            let newTableData = [];\n\n            for(let o=0; o < nameLessons.length; o++){\n                newTableData = newTableData.concat({\n                    key: o,\n                    name: <Input placeholder={1} style={{margin: 0}} onBlur={e=>nameLessonsChangeHandler(e, o)} defaultValue={nameLessons[o]}/>,\n                    11: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, o+1, 1)} defaultValue={days[0].lessons[o][0].string}/>,\n                    13: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 1, o+1, 2)} defaultValue={days[0].lessons[o][1].string}/>,\n                    21: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, o+1, 1)} defaultValue={days[1].lessons[o][0].string}/>,\n                    23: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 2, o+1, 2)} defaultValue={days[1].lessons[o][1].string}/>,\n                    31: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, o+1, 1)} defaultValue={days[2].lessons[o][0].string}/>,\n                    33: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 3, o+1, 2)} defaultValue={days[2].lessons[o][1].string}/>,\n                    41: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, o+1, 1)} defaultValue={days[3].lessons[o][0].string}/>,\n                    43: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 4, o+1, 2)} defaultValue={days[3].lessons[o][1].string}/>,\n                    51: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, o+1, 1)} defaultValue={days[4].lessons[o][0].string}/>,\n                    53: <Input placeholder={1} onBlur={e=>inputChangeHandler(e, 5, o+1, 2)} defaultValue={days[4].lessons[o][1].string}/>\n                })\n            }\n            \n            setData(newTableData)\n\n            setStatusAddOrEdit(1)\n\n            setLoadTable(true)\n        }\n    }, [days]) // eslint-disable-next-line\n\n    return (\n        <>\n            <Row justify=\"center\" align=\"middle\">\n                <Col>\n                    <Form\n                        style={{margin:\"15px 0\", display:\"flex\", \"justify-content\":\"center\", \"text-align\":\"center\"}}\n                        layout={\"inline\"}\n                        form={form}\n                    >\n                        <Form.Item className=\"input-width\">\n                            <Input value={course} onChange={courseChangeHandler} placeholder=\"Курс\" min={1} max={5} type={\"number\"} />\n                        </Form.Item>\n                        <Form.Item className=\"input-width\">\n                            <Select defaultValue={faculty} onChange={facultyChangeHandler} placeholder={\"Факультет\"}>\n                                <Select.Option value={Faculty.Medicine}>Медицина</Select.Option>\n                                <Select.Option value={Faculty.ShortMedicine}>Медицина скорочена</Select.Option>\n                                <Select.Option value={Faculty.Paramedic}>Фельдшера</Select.Option>\n                                <Select.Option value={Faculty.Nurse}>Сестринська справа</Select.Option>\n                                <Select.Option value={Faculty.Pediatric}>Педіатрія</Select.Option>\n                                <Select.Option value={Faculty.Stomatology}>Стоматологі</Select.Option>\n                                <Select.Option value={Faculty.Ortopedic}>Зубні техніки</Select.Option>\n                                <Select.Option value={Faculty.Ortopedic11}>Зубні техніки (після 11)</Select.Option>\n                                <Select.Option value={Faculty.Farmacy}>Фармація</Select.Option>\n                                <Select.Option value={Faculty.Farmacy11}>Фармація (після 11 коледж)</Select.Option>\n                                <Select.Option value={Faculty.Farmacy9}>Фармація (після 9 коледж)</Select.Option>\n                                <Select.Option value={Faculty.Reabilitology}>Реабілітологія</Select.Option>\n                                <Select.Option value={Faculty.Foreigners}>Іноземці</Select.Option>\n                                <Select.Option value={Faculty.ShortStomatology}>Скорочена стоматологія</Select.Option>\n                                <Select.Option value={Faculty.ShortFarmacy}>Скорочена фармація</Select.Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item className=\"input-width\">\n                            <Select defaultValue={typeSchedule} onChange={typeScheduleChangeHandler} placeholder={\"Тип розкладу\"}>\n                                <Select.Option value={0}>Цілий семестр</Select.Option>\n                                <Select.Option value={1}>1/2 тиждень</Select.Option>\n                            </Select>\n                        </Form.Item>\n                        {typeSchedule===1 ? \n                            <Form.Item className=\"input-width\">\n                                <Select defaultValue={numberWeek} onChange={numberWeekChangeHandler} placeholder={\"Номер тижня\"}>\n                                    <Select.Option value={1}>Перший тиждень</Select.Option>\n                                    <Select.Option value={2}>Другий тиждень</Select.Option>\n                                </Select>\n                            </Form.Item> \n                        :\n                            <Form.Item className=\"input-width\" max={minMaxDate.max}>\n                                    <DatePicker className={\"input-width \" + (errorDate?\"error-field\": \"\")} onChange={startDateChangeHandler} picker=\"week\"/>\n                            </Form.Item> \n                        }\n                    \n                        <Form.Item>\n                            <Button type=\"primary\" onClick={clickLoadHandler} loading={loadingSchedule}>Загрузити</Button>\n                        </Form.Item>\n                    </Form>\n                </Col>\n            </Row>\n            {loadTable === true ?\n            <Row justify=\"center\">\n                <Col>\n                    <Table pagination={false} bordered dataSource={data} style={{minWidth: 1000}} \n                    className={'customTable'}\n                    footer={()=>(<React.Fragment>\n                        <Row><Input placeholder=\"Потоки\" value={lectionInfo} onChange={e=>setLectionInfo(e.target.value)} /></Row>\n                        <Row>\n                            <Col><Button onClick={addRowHandler}>Add row</Button></Col>\n                            <Col>{statusAddOrEdit===0 ? \n                                <Button onClick={addSchedule} loading={addStatus}>Add schedule</Button>:\n                                <Button onClick={editSchedule} loading={addStatus}>Edit schedule</Button>\n                            }</Col>\n                        </Row>\n                    </React.Fragment>)}\n                    >\n\n                        <Column title=\"Назва дисципліни\" dataIndex=\"name\" key=\"name\" />\n                        {loadTable === true ?\n                            typeSchedule === 1 ?\n                                <>\n                                    <ColumnGroup title=\"Понеділок\">\n                                        <Column title=\"1\" dataIndex=\"11\" key=\"11\" />\n                                        <Column title=\"2\" dataIndex=\"12\" key=\"12\" />\n                                        <Column title=\"3\" dataIndex=\"13\" key=\"13\" />\n                                        <Column title=\"4\" dataIndex=\"14\" key=\"14\" />\n                                    </ColumnGroup>\n                                    <ColumnGroup title=\"Вівторок\">\n                                        <Column title=\"1\" dataIndex=\"21\" key=\"21\" />\n                                        <Column title=\"2\" dataIndex=\"22\" key=\"22\" />\n                                        <Column title=\"3\" dataIndex=\"23\" key=\"23\" />\n                                        <Column title=\"4\" dataIndex=\"24\" key=\"24\" />\n                                    </ColumnGroup>\n                                    <ColumnGroup title=\"Середа\">\n                                        <Column title=\"1\" dataIndex=\"31\" key=\"21\" />\n                                        <Column title=\"2\" dataIndex=\"32\" key=\"32\" />\n                                        <Column title=\"3\" dataIndex=\"33\" key=\"33\" />\n                                        <Column title=\"4\" dataIndex=\"34\" key=\"34\" />\n                                    </ColumnGroup>\n                                    <ColumnGroup title=\"Четвер\">\n                                        <Column title=\"1\" dataIndex=\"41\" key=\"41\" />\n                                        <Column title=\"2\" dataIndex=\"42\" key=\"42\" />\n                                        <Column title=\"3\" dataIndex=\"43\" key=\"43\" />\n                                        <Column title=\"4\" dataIndex=\"44\" key=\"44\" />\n                                    </ColumnGroup>\n                                    <ColumnGroup title=\"П'ятниця\">\n                                        <Column title=\"1\" dataIndex=\"51\" key=\"51\" />\n                                        <Column title=\"2\" dataIndex=\"52\" key=\"52\" />\n                                        <Column title=\"3\" dataIndex=\"53\" key=\"53\" />\n                                        <Column title=\"4\" dataIndex=\"54\" key=\"54\" />\n                                    </ColumnGroup>\n                                </>\n                            : \n                            <>\n                            {console.log(\"table days\", days)}\n                                    <ColumnGroup title={new Date (startDate).toDateString()}>\n                                        <Column title=\"1-2\" dataIndex=\"11\" key=\"11\" />\n                                        <Column title=\"3-4\" dataIndex=\"13\" key=\"13\" />\n                                    </ColumnGroup>\n                                    <ColumnGroup title={new Date(startDate.getFullYear(), startDate.getMonth(),startDate.getDate()+1).toDateString()}>\n                                        <Column title=\"1-2\" dataIndex=\"21\" key=\"21\" />\n                                        <Column title=\"3-4\" dataIndex=\"23\" key=\"23\" />\n                                    </ColumnGroup>\n                                    <ColumnGroup title={new Date(startDate.getFullYear(), startDate.getMonth(),startDate.getDate()+2).toDateString()}>\n                                        <Column title=\"1-2\" dataIndex=\"31\" key=\"31\" />\n                                        <Column title=\"3-4\" dataIndex=\"33\" key=\"33\" />\n                                    </ColumnGroup>\n                                    <ColumnGroup title={new Date(startDate.getFullYear(), startDate.getMonth(),startDate.getDate()+3).toDateString()}>\n                                        <Column title=\"1-2\" dataIndex=\"41\" key=\"41\" />\n                                        <Column title=\"3-4\" dataIndex=\"43\" key=\"43\" />\n                                    </ColumnGroup>\n                                    <ColumnGroup title={new Date(startDate.getFullYear(), startDate.getMonth(),startDate.getDate()+4).toDateString()}>\n                                        <Column title=\"1-2\" dataIndex=\"51\" key=\"51\" />\n                                        <Column title=\"3-4\" dataIndex=\"53\" key=\"53\" />\n                                    </ColumnGroup>\n                            </>: null\n                            }\n                    </Table>\n                </Col>\n            </Row> \n            : null}\n        </>\n    )\n}\n\nexport default Schedule","/home/mykhailo/WebstormProjects/ifnmu_client/src/GlobalVar.js",[],"/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Home/Home.js",["90","91","92"],"import React, { useState } from \"react\"\n\nimport {Row, Input, Col, Form, Button, Tooltip, Select, List, Typography, message} from \"antd\"\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport axios from \"axios\"\n\nimport {URL_API} from \"../../GlobalVar\"\n\nimport \"./Home.css\"\nimport {useHistory} from \"react-router-dom\"\n\nconst options = { year: 'numeric', month: 'long', day: 'numeric' };\n\nconst getDayofWeek = number => {\n    switch(number){\n        case 1: return \"Понеділок\";\n        case 2: return \"Вівторок\";\n        case 3: return \"Середа\";\n        case 4: return \"Четвер\";\n        case 5: return \"П'ятниця\";\n        case 6: return \"Субота\";\n        case 0: return \"Неділя\";\n        default: return \"\"\n    }\n}\nconst getTime = number =>{\n    switch(number){\n        case 1: return \"08:00\";\n        case 2: return \"10:05\";\n        case 3: return \"12:10\";\n        case 4: return \"14:15\";\n        default: return \"\"\n    }\n}\n\nconst Home = () =>{\n    const history = useHistory();\n\n    const pushTo = (location) => {\n      history.push(location);\n    }\n\n    const [form] = Form.useForm();\n\n    const [course, setCourse] = useState(1);\n    const [group, setGroup] = useState(\"\")\n\n    const [loading, setLoading] = useState(false)\n\n    const [weekLoadStatus, setWeekLoadStatus] = useState(false)\n    const [weeks, setWeeks] = useState([])\n\n    const [selectOption, setSelectOption] = useState(null)\n\n    const [loadingLessons, setLoadingLesson] = useState(false)\n\n    const [schedule, setSchedule] = useState(null)\n\n    const courseChangeHandler = e =>{\n        setCourse(e.target.value)\n\n        setWeekLoadStatus(false)\n        setSelectOption(null)\n        setSchedule(null)\n    }\n    const groupChangeHandler = e =>{\n        setGroup(e.target.value)\n\n        setWeekLoadStatus(false)\n        setSelectOption(null)\n        setSchedule(null)\n    }\n    const selectChangeHandler = value =>{\n        setLoadingLesson(true)\n        setSelectOption(value)\n\n        let str;\n\n        if(value.length > 1){\n            str=\"&startDate=\"+value;\n        }\n        else{\n            str=\"&weekNumber=\"+value;\n        }\n\n        axios.get(URL_API+\"/lesson/getLessons?course=\"+course+\"&group=\"+group+str)\n            .then(response =>{\n                console.log(response.data)\n                setLoadingLesson(false)\n                setSchedule(response.data)\n            })\n            .catch(error =>{\n                console.log(error.response)\n                setLoadingLesson(false)\n            })\n    }\n\n    const loadWeeks = () =>{\n        if(isNaN(course) || course === \"\" || group === \"\") {\n            \n            message.error(\"Ви некоректно заповнили дані\");\n            return;\n        }\n\n        setLoading(true);\n\n        axios.get(URL_API+\"/lesson/getWeeks?course=\"+course+\"&group=\"+group)\n        .then(response => {\n            console.log(response.data)\n\n            let weekType=0;\n            let w =[];\n            if(response.data.length > 0){\n                if(response.data[0].length > 1)\n                {\n                    weekType=1;\n                }\n                else{\n                    weekType=2;\n                }\n            }\n            response.data.map((option, index) =>{\n                if(weekType===1){\n                    let startDate = new Date(option);\n                    let finishDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate()+4);\n\n                    let select = <Select.Option key={index} value={option}>{startDate.toLocaleDateString('uk-UA', options) + \" - \" + finishDate.toLocaleDateString('uk-UA', options)}</Select.Option>;\n\n                    w.push(select);\n                }\n                else{\n                    let select = <Select.Option key={index} value={option}>{option===\"1\"? \"Перший тиждень\" : \"Другий тиждень\"}</Select.Option>;\n                    w.push(select);\n                }\n            })\n            setWeeks(w);\n\n            setLoading(false)\n            setWeekLoadStatus(true)\n        })\n        .catch(error=>{\n            if(error.respones == null || error.response == undefined){\n                message.error(\"Помилка\")\n            }\n            else if(error.response.status === 404) {\n                message.error(\"Даного розкладу не існує\")\n            }\n            else{\n                message.error(\"Помилка запиту\")\n            }\n\n            console.log(error.response)\n\n            setLoading(false)\n            setWeekLoadStatus(false)\n        })\n\n    }\n\n    return(\n        <>\n            <Row justify=\"center\" gutter={[8, 16]}>\n                    <Form\n                        style={{margin:\"15px 0\"}}\n                        layout={\"inline\"}\n                        form={form}\n                        style={{\"justify-content\":\"center\"}}\n                    >\n                        <Col md={weekLoadStatus === false ? 11 : 8} sm={12}>\n                            <Form.Item >\n                                <Input value={course} onChange={courseChangeHandler} placeholder=\"Курс\" min={1} max={5} type={\"number\"} />\n                            </Form.Item>\n                        </Col>\n                        <Col md={weekLoadStatus === false ? 11 : 8} sm={12}>\n                        <Form.Item>\n                            <Input value={group} onChange={groupChangeHandler} placeholder=\"Група\" />\n                        </Form.Item>\n                        </Col>\n\n                        <Col md={weekLoadStatus === false ? 2 : 12} sm={weekLoadStatus === false ? 2 : 16} xs={weekLoadStatus === false ? 2 : 20}>\n                        {weekLoadStatus === false ?\n                    \n                            <Form.Item>\n                                    <Tooltip title=\"search\">\n                                        <Button type=\"primary\" onClick={loadWeeks} shape=\"circle\" icon={<SearchOutlined />} loading={loading}/>\n                                    </Tooltip>\n                            </Form.Item>\n                        :\n                            <Form.Item>\n                                <Select style={{width: \"100%\"}} placeholder={\"Тиждень\"} onChange={selectChangeHandler} value={selectOption} loading={loadingLessons}>\n                                    {weeks.map(opt=> opt )}\n                                </Select> \n                            </Form.Item>\n                        }\n                        </Col>\n                    </Form>\n            </Row>\n            <Row justify=\"center\">\n                <Col xs={{span:24}} sm={20}>\n                {schedule !== null ? schedule.weeks[0].days.map((option, index)=>{\n                    return <List\n                        key={index}\n                        header={<div style={{textAlign : \"center\"}}><Typography.Text strong>{option.dayOfWeek === null ? new Date(option.dateTime).toDateString() : getDayofWeek(option.dayOfWeek)}</Typography.Text></div>}\n                        bordered\n                        dataSource={option.lessons}\n                        renderItem={item => (\n                            <List.Item className={\"listItem\"} style={{position:\"relative\"}} onClick={()=> pushTo(\"/files/\"+course+\"/\"+item.name+\"/\"+schedule.faculty)}>\n                                <Typography.Text style={{width: \"82%\"}} strong>{item.number}. {item.name}</Typography.Text>\n                                <Typography.Text style={{width: \"18%\"}}>{getTime(item.number)}</Typography.Text>\n                            </List.Item>\n                        )}\n                    />\n                }):null}\n                </Col>\n            </Row> \n        </>\n    )\n}\n\nexport default Home;","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Directories/Directories.js",["93","94","95","96","97","98","99"],"import React, {useState, useEffect} from \"react\"\n\nimport axios from \"axios\";\n\nimport {URL_API, getFacultyName, Faculty} from \"../../GlobalVar\"\n\nimport {Row, Col, Form, Input, Button, message, Table, Modal, Select} from \"antd\"\n\nimport \"./Directories.css\"\n\nimport {useHistory} from \"react-router-dom\"\n\nconst columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      sorter:{ \n            compare: (a, b) => a > b,\n            multiple: 1\n        }\n    },\n    {\n      title: 'Course',\n      dataIndex: 'course',\n      key: 'course',\n      filters: [\n            {\n            text: '1',\n            value: '1',\n            },\n            {\n            text: '2',\n            value: '2',\n            },\n            {\n            text: '3',\n            value: '3',\n            },\n            {\n            text: '4',\n            value: '4',\n            },\n            {\n            text: '5',\n            value: '5',\n            }\n        ],\n        onFilter: (value, record) => record.course == value,\n        sorter: {\n            compare :(a, b) => a.course - b.course,\n            multiple: 2\n        }\n    },\n    {\n        title: 'Faculty',\n        dataIndex: 'faculty',\n        key: 'faculty',\n        sorter: {\n            compare :(a, b) => a.course - b.course,\n            multiple: 2\n        },\n        render: value => getFacultyName(value)\n      }\n  ];\n\n\nconst Directories = ()=>{\n    const history = useHistory();\n\n    const pushTo = (location) => {\n      history.push(location);\n    }\n\n    const [form] = Form.useForm();\n\n    const [directories, setDirectories] = useState([])\n    const [add, setAdd] = useState(false)\n\n    const [name, setName] = useState(\"\")\n    const [course, setCourse] = useState(1)\n    const [nameLesson, setNameLesson] = useState(\"\")\n    const [faculty, setFaculty] = useState(0)\n\n    const nameChangeHandler = event =>{\n        setName(event.target.value)\n    }\n    const courseChangeHandler = event =>{\n        setCourse(event.target.value)\n    }\n    const nameLessonChangeHandler = event =>{\n        setNameLesson(event.target.value)\n    }\n    const facultyChangeHandler = value => {\n        setFaculty(value)\n    }\n\n    const [modalActive, setModalActive] = useState(false);\n    const [dirId, setDirId] = useState(null)\n    const showModal = () => setModalActive(true)\n    const hideModal = () => setModalActive(false)\n\n    useEffect(()=>{\n        setAdd(true)\n\n        axios.get(URL_API+\"/directory/directories\").then(response=>{\n            setDirectories(response.data)\n            setAdd(false)\n            console.log(response.data)\n        }).catch(error=>{\n            console.log(error.response)\n            setAdd(false)\n        })\n    }, [])\n\n    const addDirectoryHandler = () =>{\n        if(isNaN(course) || course === \"\" || nameLesson === \"\") {\n            \n            message.error(\"Ви некоректно заповнили дані\");\n            return;\n        }\n\n        setAdd(true)\n\n        axios.post(URL_API+\"/directory\", {name, nameLesson, course}).then(response=>{\n            setDirectories(directories.concat(response.data))\n            setAdd(false)\n        }).catch(error=>{\n            if(error.response.status === 400){\n                message.error(error.response.data);\n            }\n            else{\n                message.error(\"Помилка\");\n            }\n\n            console.log(error.response)\n            setAdd(false)\n        })\n\n    }\n\n    const deleteDirectoryHandler = () =>{\n        let d= [...directories];\n\n        d.forEach((el,i) =>{\n            if(el.id === dirId){\n                d.splice(i,1);\n                \n            }\n        })\n\n        setDirectories(d);\n        hideModal()\n    }\n\n    return(\n        <>\n            <Row justify=\"center\" gutter={[8, 16]}>\n                \n                    <Form\n                        style={{margin:\"15px 0\",\"justify-content\":\"center\"}}\n                        layout={\"inline\"}\n                        form={form}\n                    >\n                        <Col justify=\"center\">\n                            <Form.Item className=\"input-width\">\n                                <Input value={course} onChange={courseChangeHandler} placeholder=\"Курс\" min={1} max={5} type={\"number\"} />\n                            </Form.Item>\n                        </Col>\n                        {/*<Col justify=\"center\">\n                            <Form.Item className=\"input-width\">\n                                <Input value={name} onChange={nameChangeHandler} placeholder=\"Назва папки\" />\n                            </Form.Item>\n                        </Col>*/}\n                        <Col justify=\"center\">\n                            <Form.Item className=\"input-width\">\n                                <Input value={nameLesson} onChange={nameLessonChangeHandler} placeholder=\"Назва предмету\" />\n                            </Form.Item>\n                        </Col>\n                        \n                        <Col justify=\"center\">\n                            <Form.Item className=\"input-width\">\n                                <Select defaultValue={faculty} onChange={facultyChangeHandler} placeholder={\"Факультет\"}>\n                                    <Select.Option value={Faculty.Medicine}>Медицина</Select.Option>\n                                    <Select.Option value={Faculty.ShortMedicine}>Медицина скорочена</Select.Option>\n                                    <Select.Option value={Faculty.Paramedic}>Фельдшера</Select.Option>\n                                    <Select.Option value={Faculty.Nurse}>Сестринська справа</Select.Option>\n                                    <Select.Option value={Faculty.Pediatric}>Педіатрія</Select.Option>\n                                    <Select.Option value={Faculty.Stomatology}>Стоматологі</Select.Option>\n                                    <Select.Option value={Faculty.Ortopedic}>Зубні техніки</Select.Option>\n                                    <Select.Option value={Faculty.Ortopedic11}>Зубні техніки (після 11)</Select.Option>\n                                    <Select.Option value={Faculty.Farmacy}>Фармація</Select.Option>\n                                    <Select.Option value={Faculty.Farmacy11}>Фармація (після 11 коледж)</Select.Option>\n                                    <Select.Option value={Faculty.Farmacy9}>Фармація (після 9 коледж)</Select.Option>\n                                    <Select.Option value={Faculty.Reabilitology}>Реабілітологія</Select.Option>\n                                    <Select.Option value={Faculty.Foreigners}>Іноземці</Select.Option>\n                                    <Select.Option value={Faculty.ShortStomatology}>Скорочена стоматологія</Select.Option>\n                                    <Select.Option value={Faculty.ShortFarmacy}>Скорочена фармація</Select.Option>\n                                </Select>\n                            </Form.Item>\n                        </Col>\n                        <Col justify=\"center\">\n                            <Form.Item>\n                                <Button onClick={addDirectoryHandler} loading={add}>Додати</Button>\n                            </Form.Item>\n                        </Col>\n                    </Form>\n            </Row>\n            <Row justify={\"center\"}>\n                <Col xs={24} sm={22} md={18}>\n                    {/*<List\n                        header={<div style={{textAlign : \"center\"}}><Typography.Text strong>Папки</Typography.Text></div>}\n                        bordered\n                        dataSource={directories}\n                        renderItem={item => (\n                            <List.Item className={\"listItem\"} style={{position:\"relative\"}} onClick={()=>pushTo(\"/directory/\"+item.id)}>\n                                <Typography.Text strong>{item.name} | {item.course} курс</Typography.Text>\n                            </List.Item>\n                        )}\n                        />*/}\n\n                    <Table columns={columns} dataSource={directories} size={\"small\"} \n                        onRow={(record, rowIndex) => {\n                            return {\n                                onClick: event => {pushTo(\"/directory/\"+record.id)}, // click row\n                                /*onContextMenu: event => { \n                                    event.preventDefault();\n                                    setDirId(record.id)\n                                    showModal()\n                                }*/\n                            };\n                        }}/>\n\n                    {/*<Modal\n                        title=\"Видалити папку\"\n                        visible={modalActive}\n                        onOk={deleteDirectoryHandler}\n                        onCancel={hideModal}\n                        okText=\"Підтвердити\"\n                        cancelText=\"Відмінити\"\n                        >\n                        <p>Ви справді хочете видалити папку?</p>\n                    </Modal>*/}\n                </Col>\n            </Row>\n        </>\n    )\n\n}\n\nexport default Directories\n","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Directory/Directory.js",["100","101","102","103"],"import React, {useState, useEffect} from \"react\"\nimport { useParams, useHistory } from \"react-router-dom/cjs/react-router-dom.min\"\nimport {URL_API} from \"../../GlobalVar\"\nimport axios from \"axios\"\n\nimport {Row, Col, Typography, List, Form, Button, Input, message } from \"antd\"\n\n\nimport {FileDoneOutlined, FolderOpenOutlined} from \"@ant-design/icons\"\n\nconst Directory = () =>{\n    const [form] = Form.useForm();\n\n    const {id} = useParams()\n\n    const history = useHistory();\n\n    const [directory, setDirectory] = useState()\n\n    const [add, setAdd] = useState(false)\n\n    const [file, setFile] = useState()\n\n    const [subDirectoryName, setSubDirectoryName] = useState(\"\")\n\n    const fileChangeHandler = event =>{\n        setFile(event.target.files)\n\n        console.log(event.target.files)\n    }\n\n    const subDirectoryNameChangeHandler = event =>{\n        setSubDirectoryName(event.target.value)\n    }\n\n    const addSubDirectory = () =>{\n        if(subDirectoryName.length == \"\")\n        {\n            message.error(\"Ви не ввели назву папки\")\n            return\n        }\n        setAdd(true)\n\n        axios.post(URL_API+\"/subdirectory/addsubdirectory\", {directoryId : id, name: subDirectoryName})\n        .then(response =>{\n            let d = directory;\n            console.log(response.data)\n            d.subDirectories=d.subDirectories.concat(response.data)\n\n            message.success(\"Ви успішно додали папку\")\n\n            setDirectory(d)\n\n            setAdd(false)\n            setFile()\n        })\n        .catch(error=>{\n            message.error(\"Помилка\")\n\n            console.log(error)\n            setAdd(false)\n        })\n    }\n\n    const addFilesHandler = () =>{\n        if(file.length == 0){\n            message.error(\"Ви не вибрали файли\")\n            return\n        }\n\n        setAdd(true)\n\n        const data = new FormData();\n\n        data.append(\"directoryId\", id);\n\n        for(let i =0; i< file.length; i++)\n        {\n            data.append(\"formFiles\", file[i])\n        }\n\n        axios.post(URL_API+\"/file?isSubDir=false\", data).then(response=>{\n            let d = directory;\n            console.log(response.data)\n            d.files=d.files.concat(response.data.list)\n\n            if(response.data.message !== \"\"){\n                message.warning(response.data.message, 5)\n            }\n\n            setDirectory(d)\n\n            setAdd(false)\n            setFile()\n        }).catch(error=>{\n            message.error(\"Помилка\")\n\n            console.log(error)\n            setAdd(false)\n        })\n\n    }\n\n    useEffect(()=>{\n        axios.get(URL_API+\"/directory/directory/\"+id).then(response=>{\n            setDirectory(response.data)\n        }).catch(error=>console.log(error.response))\n    }, [id])\n\n    return(\n        <>\n            <Row justify={\"center\"}>\n                <Col>\n                {directory == null ? <Typography.Text>None</Typography.Text>:\n                    <Typography.Text strong>{directory.name} | {directory.course} курс</Typography.Text>\n                }\n                </Col>\n            </Row>\n            <Row justify=\"center\" gutter={[8,16]}>\n            \n                    <Form\n                        style={{margin:\"15px 0\", \"justify-content\": \"center\"}}\n                        layout={\"inline\"}\n                        form={form}\n                    >\n                        <Col>\n                            <Form.Item>\n                                <Input type={\"file\"} multiple onChange={fileChangeHandler} />\n                            </Form.Item>\n                        </Col>\n                        <Col>\n                            <Form.Item>\n                                <Button onClick={addFilesHandler} loading={add}>Додати</Button>\n                            </Form.Item>\n                        </Col>\n                    </Form>\n            </Row>\n            <Row justify=\"center\" gutter={[8,16]}>\n            \n                    <Form\n                        style={{margin:\"15px 0\", \"justify-content\": \"center\"}}\n                        layout={\"inline\"}\n                        form={form}\n                    >\n                        <Col>\n                            <Form.Item>\n                                <Input type={\"text\"} value={subDirectoryName} onChange={subDirectoryNameChangeHandler} />\n                            </Form.Item>\n                        </Col>\n                        <Col>\n                            <Form.Item>\n                                <Button onClick={addSubDirectory} loading={add}>Додати папку</Button>\n                            </Form.Item>\n                        </Col>\n                    </Form>\n            </Row>\n            {directory == null || directory.subDirectories == undefined || directory.subDirectories == null || directory.subDirectories.length == 0 ? null:\n                <Row justify={\"center\"}>\n                    <Col xs={24} sm={22} md={16}>\n                        <List\n                            header={<div style={{textAlign : \"center\"}}><Typography.Text strong>Папки</Typography.Text></div>}\n                            bordered\n                            dataSource={directory.subDirectories}\n                            renderItem={item => (\n                                <List.Item className={\"listItem\"} style={{position:\"relative\"}}>\n                                    <Typography.Link onClick={()=>history.push(\"/subdirectory/\"+item.id)}  target=\"_blank\" strong><FolderOpenOutlined /> {item.name}</Typography.Link>\n                                </List.Item>\n                            )}\n                        />\n                    </Col>\n                </Row>\n            }\n            <Row justify={\"center\"}>\n                <Col xs={24} sm={22} md={16}>\n                    <List\n                        header={<div style={{textAlign : \"center\"}}><Typography.Text strong>Файли</Typography.Text></div>}\n                        bordered\n                        dataSource={directory == null ? [] : directory.files}\n                        renderItem={item => (\n                            <List.Item className={\"listItem\"} style={{position:\"relative\"}}>\n                                <Typography.Link href={URL_API.replace(\"/api\", \"\")+\"/\"+item.path} target=\"_blank\" strong><FileDoneOutlined /> {item.name}</Typography.Link>\n                            </List.Item>\n                        )}\n                    />\n                </Col>\n            </Row>\n            \n        </>\n    )\n}\n\nexport default Directory","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Files/Files.js",["104","105","106","107","108"],"import React, {useState, useEffect} from \"react\"\nimport { useParams } from \"react-router-dom/cjs/react-router-dom.min\"\nimport {URL_API} from \"../../GlobalVar\"\nimport axios from \"axios\"\nimport {Row, Col, Typography, List, Result, Spin, Collapse } from \"antd\"\n\nimport { SmileOutlined, FileDoneOutlined, FolderOpenOutlined, FolderViewOutlined } from '@ant-design/icons';\n\nconst Files = () =>{\n    const {course, name, faculty} = useParams()\n\n    const [directory, setDirectory] = useState(null)\n\n    const [loading, setLoading] = useState(true)\n\n    useEffect(()=>{\n        axios.get(URL_API+\"/directory/directory/\"+course+\"/\"+name+\"/\"+faculty).then(response=>{\n            setDirectory(response.data)\n            setLoading(false)\n        }).catch(error=>{console.log(error.response); setLoading(false)})\n    }, [course, name])\n    \n    return(\n        <>\n        {loading === true ? <Row justify={\"center\"}><Spin size=\"large\" /> </Row>:\n            directory === null || directory.files.length == 0 || directory.subDirectories.length == 0 ? <Result\n                    icon={<SmileOutlined />}\n                    title=\"На даний момент немає файлів по даній дисципліні\"\n                /> : \n                <>\n\n                    <Typography.Text strong style={{fontSize: 20, textAlign:\"center\", width:\"100%\", display:\"block\", marginBottom: 10}}>{directory.name}</Typography.Text>\n\n                {directory.subDirectories == null || directory.subDirectories == undefined || directory.subDirectories.length === 0 ? null :\n                    <Row justify={\"center\"}>\n                        <Col xs={24} sm={22} md={16}>\n                            <Collapse>\n                                {directory.subDirectories.map((option, index) =>\n                                    <Collapse.Panel header={<Typography.Link strong><FolderViewOutlined /> {option.name}</Typography.Link>}>\n                                        {option.files.length === 0 ? <Typography.Text>Папка пуста</Typography.Text> :\n                                        <List\n                                            header={null}\n                                            bordered\n                                            dataSource={option.files == null ? [] : option.files}\n                                            renderItem={item => (\n                                                <List.Item className={\"listItem\"} style={{position:\"relative\"}}>\n                                                    <Typography.Link style={{width: \"100%\"}} href={URL_API.replace(\"/api\", \"\")+\"/\"+item.path} target=\"_blank\" strong><FileDoneOutlined /> {item.name}</Typography.Link>\n                                                </List.Item>\n                                            )}\n                                        />\n                                        }\n                                    </Collapse.Panel>\n    \n                                )\n                                }\n                            </Collapse>\n                        </Col>\n                    </Row>\n                }\n\n                <Row justify={\"center\"}>\n                    <Col xs={24} sm={22} md={16}>\n                        <List\n                            header={null}\n                            bordered\n                            dataSource={directory == null ? [] : directory.files}\n                            renderItem={item => (\n                                <List.Item className={\"listItem\"} style={{position:\"relative\"}}>\n                                    <Typography.Link style={{width: \"100%\"}} href={URL_API.replace(\"/api\", \"\")+\"/\"+item.path} target=\"_blank\" strong><FileDoneOutlined /> {item.name}</Typography.Link>\n                                </List.Item>\n                            )}\n                        />\n                    </Col>\n                </Row>\n                \n            \n\n                </>\n        }\n        </>\n    )\n}\n\nexport default Files\n","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Instruction/Instruction.js",[],"/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/Admin/Admin.js",["109"],"import React, {useEffect, useState} from \"react\"\nimport axios from \"axios\"\nimport {URL_API, getFacultyName, getScheduleType} from \"../../GlobalVar\"\n\nimport {message, Row, Spin, Table, Button} from 'antd'\n\nconst columns = [\n    {\n      title: 'Group',\n      dataIndex: 'group'\n    },\n    {\n      title: 'Course',\n      dataIndex: 'course',\n    },\n    {\n      title: 'Faculty',\n      dataIndex: 'faculty',\n      render: text => getFacultyName(text)\n    },\n    {\n        title: 'Schedule type',\n        dataIndex: 'scheduleType',\n        render: text => getScheduleType(text)\n    },\n  ];\n\n\nconst Admin = () =>{\n\n    const [schedules, setSchedules] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    const [selectId, setSelectId] = useState([])\n\n    useEffect(()=>{\n        axios.get(URL_API+\"/schedule/getAllSchedules\").then(response=>{\n            for(let a=0; a < response.data.length; a++){\n                response.data[a].key=a;\n            }\n            setSchedules(response.data)\n            setLoading(false)\n        }).catch(error =>{\n            message.error(error.response.data)\n            setLoading(false)\n        })\n\n    }, [])\n\n    const deleteSelect = () =>{\n        if(selectId.length === 0) {\n            message.error(\"Ви не вибрали дані\")\n            return\n          }\n  \n          let str = \"\";\n          for(let u=0; u< selectId.length; u++){\n            str+=\"&id=\"+selectId[u]\n          }\n  \n          axios.delete(URL_API+\"/schedule?\"+str).then(response=>{\n            let d= [...schedules];\n\n            d.forEach((el,i) =>{\n                for(let o=0; o< response.data.length; o++)\n                {\n                    if(el.id === response.data[o]){\n                        d.splice(i,1);\n                    }\n                }\n            })\n\n            setSchedules(d);\n\n            message.success(\"Видалено успішно\")\n            setSelectId([])\n          }).catch(error=>console.log('erro'))\n    }\n\n    return(\n        <>\n            {loading == true ? <Row jusify={\"center\"}><Spin size=\"large\" /></Row> :\n            <Table\n                rowSelection={{\n                  type: 'checkbox',\n                  onChange: (selectedRowKeys, selectedRows) => {\n                    let ar = [];\n                    for(let i =0; i< selectedRows.length; i++){\n                        ar.push(selectedRows[i].id)\n                    }\n                    setSelectId(ar);\n                  }\n                }}\n                columns={columns}\n                dataSource={schedules}\n                footer={() => <Button onClick={deleteSelect}>Delete select</Button>}\n              />\n            }\n        </>\n    )\n}\n\nexport default Admin","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/AdminWeek/AdminWeek.js",["110","111"],"import React, {useEffect, useState} from \"react\"\nimport axios from \"axios\"\nimport {URL_API, getWeekType} from \"../../GlobalVar\"\n\nimport {message, Row, Spin, Table, Button} from 'antd'\n\nimport {useParams} from \"react-router-dom\"\n\nconst columns = [\n    {\n      title: 'Week type',\n      dataIndex: 'weekType',\n      render: text => getWeekType(text)\n    },\n    {\n      title: 'Week number',\n      dataIndex: 'weekNumber'\n    },\n    {\n      title: 'Week start',\n      dataIndex: 'startDate'\n    },\n    {\n      title: 'Week finish',\n      dataIndex: 'finishDate'\n    }\n  ];\n\n\nconst AdminWeek = () =>{\n\n    const [weeks, setWeeks] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    const [selectId, setSelectId] = useState([])\n\n    useEffect(()=>{\n        axios.get(URL_API+\"/lesson/getAllWeeks\").then(response=>{\n            for(let a=0; a < response.data.length; a++){\n                response.data[a].key=a;\n            }\n            setWeeks(response.data)\n            setLoading(false)\n        }).catch(error =>{\n            message.error(error.response.data)\n            setLoading(false)\n        })\n\n    }, [])\n\n    const deleteSelect = () =>{\n        if(selectId.length === 0) {\n          message.error(\"Ви не вибрали дані\")\n          return\n        }\n\n        let str = \"\";\n        for(let u=0; u< selectId.length; u++){\n          str+=\"&id=\"+selectId[u]\n        }\n\n        axios.delete(URL_API+\"/Lesson/deleteWeeks?\"+str).then(response=>{\n          let d= [...weeks];\n\n            d.forEach((el,i) =>{\n                for(let o=0; o< response.data.length; o++)\n                {\n                    if(el.id === response.data[o]){\n                        d.splice(i,1);\n                    }\n                }\n            })\n\n            setWeeks(d);\n\n            message.success(\"Видалено успішно\")\n            setSelectId([])\n        }).catch(error=>console.log('erro'))\n    }\n\n    return(\n        <>\n            {loading == true ? <Row jusify={\"center\"}><Spin size=\"large\" /></Row> :\n            <Table\n                rowSelection={{\n                  type: 'checkbox',\n                  onChange: (selectedRowKeys, selectedRows) => {\n                    let ar = [];\n                    for(let i =0; i< selectedRows.length; i++){\n                        ar.push(selectedRows[i].id)\n                    }\n                    setSelectId(ar);\n                  }\n                }}\n                columns={columns}\n                dataSource={weeks}\n                footer={() => <Button onClick={deleteSelect}>Delete select</Button>}\n              />\n            }\n        </>\n    )\n}\n\nexport default AdminWeek","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/AdminFolder/AdminFolder.js",["112","113","114"],"import React, {useEffect, useState} from \"react\"\nimport axios from \"axios\"\nimport {URL_API, getWeekType} from \"../../GlobalVar\"\n\nimport {message, Row, Spin, Table, Button} from 'antd'\n\nimport {useParams, useHistory} from \"react-router-dom\"\n\nconst columns = [\n    {\n      title: 'Name lesson',\n      dataIndex: 'nameLesson',\n    },\n    {\n      title: 'Course',\n      dataIndex: 'course'\n    }\n  ];\n\n\nconst AdminFolder = () =>{\n\n    const history = useHistory();\n\n    const pushTo = (location) => {\n      history.push(location);\n    }\n\n    const [folders, setFolders] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    const [selectId, setSelectId] = useState([])\n\n    useEffect(()=>{\n        axios.get(URL_API+\"/directory/directories\").then(response=>{\n            for(let a=0; a < response.data.length; a++){\n                response.data[a].key=a;\n            }\n            setFolders(response.data)\n            setLoading(false)\n        }).catch(error =>{\n            message.error(error.response.data)\n            setLoading(false)\n        })\n\n    }, [])\n\n    const deleteSelect = () =>{\n        if(selectId.length === 0) {\n          message.error(\"Ви не вибрали дані\")\n          return\n        }\n\n        let str = \"\";\n        for(let u=0; u< selectId.length; u++){\n          str+=\"&id=\"+selectId[u]\n        }\n\n        axios.delete(URL_API+\"/Directory?\"+str).then(response=>{\n          let d= [...folders];\n\n            d.forEach((el,i) =>{\n                for(let o=0; o< response.data.length; o++)\n                {\n                    if(el.id === response.data[o]){\n                        d.splice(i,1);\n                        break;\n                    }\n                }\n            })\n\n            setFolders(d);\n\n            message.success(\"Видалено успішно\")\n            setSelectId([])\n        }).catch(error=>console.log('erro'))\n    }\n\n    return(\n        <>\n            {loading == true ? <Row jusify={\"center\"}><Spin size=\"large\" /></Row> :\n            <Table\n                rowSelection={{\n                  type: 'checkbox',\n                  onChange: (selectedRowKeys, selectedRows) => {\n                    let ar = [];\n                    for(let i =0; i< selectedRows.length; i++){\n                        ar.push(selectedRows[i].id)\n                    }\n                    setSelectId(ar);\n                  }\n                }}\n                onRow={(record, rowIndex) => {\n                  return {\n                      onClick: event => {pushTo(\"/admin/files/\"+record.id)}, // click row\n                      /*onContextMenu: event => { \n                          event.preventDefault();\n                          setDirId(record.id)\n                          showModal()\n                      }*/\n                  };\n                }}\n                columns={columns}\n                dataSource={folders}\n                footer={() => <Button onClick={deleteSelect}>Delete select</Button>}\n              />\n            }\n        </>\n    )\n}\n\nexport default AdminFolder","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/AdminFile/AdminFile.js",["115","116"],"import React, {useEffect, useState} from \"react\"\nimport axios from \"axios\"\nimport {URL_API, getWeekType} from \"../../GlobalVar\"\n\nimport {message, Row, Spin, Table, Button} from 'antd'\n\nimport {useParams} from \"react-router-dom\"\n\nconst columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n    }\n  ];\n\n\nconst AdminFile = () =>{\n    let {id} = useParams()\n\n    const [files, setFiles] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    const [selectId, setSelectId] = useState([])\n\n    useEffect(()=>{\n        if(id === null || id === undefined)\n        {\n            axios.get(URL_API+\"/file/getAllFiles\").then(response=>{\n                for(let a=0; a < response.data.length; a++){\n                    response.data[a].key=a;\n                }\n                setFiles(response.data)\n                setLoading(false)\n            }).catch(error =>{\n                message.error(error.response.data)\n                setLoading(false)\n            })\n        }\n        else{\n            axios.get(URL_API+\"/directory/directory/\"+id).then(response=>{\n                for(let a=0; a < response.data.files.length; a++){\n                    response.data.files[a].key=a;\n                }\n                setFiles(response.data.files)\n                setLoading(false)\n            }).catch(error =>{\n                message.error(error.response.data)\n                setLoading(false)\n            })\n        }\n\n    }, [id])\n\n    const deleteSelect = () =>{\n        if(selectId.length === 0) {\n          message.error(\"Ви не вибрали дані\")\n          return\n        }\n\n        let str = \"\";\n        for(let u=0; u< selectId.length; u++){\n          str+=\"&id=\"+selectId[u]\n        }\n\n        axios.delete(URL_API+\"/file?\"+str).then(response=>{\n          let d= [...files];\n\n            d.forEach((el,i) =>{\n                for(let o=0; o< response.data.length; o++)\n                {\n                    if(el.id === response.data[o]){\n                        d.splice(i,1);\n                    }\n                }\n            })\n\n            setFiles(d);\n\n            message.success(\"Видалено успішно\")\n            setSelectId([])\n        }).catch(error=>console.log('erro'))\n    }\n\n    return(\n        <>\n            {loading == true ? <Row jusify={\"center\"}><Spin size=\"large\" /></Row> :\n            <Table\n                rowSelection={{\n                  type: 'checkbox',\n                  onChange: (selectedRowKeys, selectedRows) => {\n                    let ar = [];\n                    for(let i =0; i< selectedRows.length; i++){\n                        ar.push(selectedRows[i].id)\n                    }\n                    setSelectId(ar);\n                  }\n                }}\n                columns={columns}\n                dataSource={files}\n                footer={() => <Button onClick={deleteSelect}>Delete select</Button>}\n              />\n            }\n        </>\n    )\n}\n\nexport default AdminFile","/home/mykhailo/WebstormProjects/ifnmu_client/src/Components/SubDirectory/SubDirectory.js",["117"],"import React, {useState, useEffect} from \"react\"\n\nimport {useParams} from \"react-router-dom\"\n\nimport {URL_API} from \"../../GlobalVar\"\nimport axios from \"axios\"\n\nimport {Row, Col, Typography, List, Form, Button, Input, message } from \"antd\"\n\nimport {FileDoneOutlined} from \"@ant-design/icons\"\n\nconst SubDirectory = ()=>{\n\n    const [form] = Form.useForm();\n\n    const {id} = useParams()\n\n    const [directory, setDirectory] = useState()\n\n    const [add, setAdd] = useState(false)\n\n    const [file, setFile] = useState()\n\n    const fileChangeHandler = event =>{\n        setFile(event.target.files)\n\n        console.log(event.target.files)\n    }\n\n    const addFilesHandler = () =>{\n        if(file.length == 0){\n            message.error(\"Ви не вибрали файли\")\n            return\n        }\n\n        setAdd(true)\n\n        const data = new FormData();\n\n        data.append(\"directoryId\", id);\n\n        for(let i =0; i< file.length; i++)\n        {\n            data.append(\"formFiles\", file[i])\n        }\n\n        axios.post(URL_API+\"/file?isSubDir=true\", data).then(response=>{\n            let d = directory;\n            console.log(response.data)\n            d.files=d.files.concat(response.data.list)\n\n            if(response.data.message !== \"\"){\n                message.warning(response.data.message, 5)\n            }\n\n            setDirectory(d)\n\n            setAdd(false)\n            setFile()\n        }).catch(error=>{\n            message.error(\"Помилка\")\n\n            console.log(error)\n            setAdd(false)\n        })\n\n    }\n\n    useEffect(()=>{\n        axios.get(URL_API+\"/subdirectory/subdirectory/\"+id).then(response=>{\n            setDirectory(response.data)\n        }).catch(error=>console.log(error.response))\n    }, [id])\n\n    return(\n        <>\n            <Row justify={\"center\"}>\n                <Col>\n                {directory == null ? <Typography.Text>None</Typography.Text>:\n                    <Typography.Text strong>{directory.name}</Typography.Text>\n                }\n                </Col>\n            </Row>\n            <Row justify=\"center\" gutter={[8,16]}>\n            \n                    <Form\n                        style={{margin:\"15px 0\", \"justify-content\": \"center\"}}\n                        layout={\"inline\"}\n                        form={form}\n                    >\n                        <Col>\n                            <Form.Item>\n                                <Input type={\"file\"} multiple onChange={fileChangeHandler} />\n                            </Form.Item>\n                        </Col>\n                        <Col>\n                            <Form.Item>\n                                <Button onClick={addFilesHandler} loading={add}>Додати</Button>\n                            </Form.Item>\n                        </Col>\n                    </Form>\n            </Row>\n\n            <Row justify={\"center\"}>\n                <Col xs={24} sm={22} md={16}>\n                    <List\n                        header={<div style={{textAlign : \"center\"}}><Typography.Text strong>Файли</Typography.Text></div>}\n                        bordered\n                        dataSource={directory == null ? [] : directory.files}\n                        renderItem={item => (\n                            <List.Item className={\"listItem\"} style={{position:\"relative\"}}>\n                                <Typography.Link href={URL_API.replace(\"/api\", \"\")+\"/\"+item.path} target=\"_blank\" strong><FileDoneOutlined /> {item.name}</Typography.Link>\n                            </List.Item>\n                        )}\n                    />\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nexport default SubDirectory",{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":1,"column":26,"nodeType":"124","messageId":"125","endLine":1,"endColumn":35},{"ruleId":"122","severity":1,"message":"126","line":4,"column":24,"nodeType":"124","messageId":"125","endLine":4,"endColumn":29},{"ruleId":"122","severity":1,"message":"127","line":4,"column":31,"nodeType":"124","messageId":"125","endLine":4,"endColumn":37},{"ruleId":"122","severity":1,"message":"128","line":6,"column":5,"nodeType":"124","messageId":"125","endLine":6,"endColumn":20},{"ruleId":"122","severity":1,"message":"129","line":8,"column":5,"nodeType":"124","messageId":"125","endLine":8,"endColumn":17},{"ruleId":"122","severity":1,"message":"130","line":10,"column":5,"nodeType":"124","messageId":"125","endLine":10,"endColumn":24},{"ruleId":"131","severity":1,"message":"132","line":45,"column":23,"nodeType":"133","messageId":"134","endLine":45,"endColumn":25},{"ruleId":"131","severity":1,"message":"132","line":125,"column":31,"nodeType":"133","messageId":"134","endLine":125,"endColumn":33},{"ruleId":"131","severity":1,"message":"132","line":320,"column":30,"nodeType":"133","messageId":"134","endLine":320,"endColumn":32},{"ruleId":"135","severity":1,"message":"136","line":512,"column":8,"nodeType":"137","endLine":512,"endColumn":14,"suggestions":"138"},{"ruleId":"139","severity":1,"message":"140","line":123,"column":47,"nodeType":"141","messageId":"142","endLine":123,"endColumn":49},{"ruleId":"131","severity":1,"message":"132","line":143,"column":57,"nodeType":"133","messageId":"134","endLine":143,"endColumn":59},{"ruleId":"143","severity":1,"message":"144","line":168,"column":25,"nodeType":"145","endLine":168,"endColumn":61},{"ruleId":"122","severity":1,"message":"146","line":7,"column":56,"nodeType":"124","messageId":"125","endLine":7,"endColumn":61},{"ruleId":"131","severity":1,"message":"132","line":49,"column":52,"nodeType":"133","messageId":"134","endLine":49,"endColumn":54},{"ruleId":"122","severity":1,"message":"147","line":85,"column":11,"nodeType":"124","messageId":"125","endLine":85,"endColumn":28},{"ruleId":"122","severity":1,"message":"148","line":98,"column":12,"nodeType":"124","messageId":"125","endLine":98,"endColumn":23},{"ruleId":"122","severity":1,"message":"149","line":99,"column":19,"nodeType":"124","messageId":"125","endLine":99,"endColumn":27},{"ruleId":"122","severity":1,"message":"150","line":100,"column":11,"nodeType":"124","messageId":"125","endLine":100,"endColumn":20},{"ruleId":"122","severity":1,"message":"151","line":142,"column":11,"nodeType":"124","messageId":"125","endLine":142,"endColumn":33},{"ruleId":"131","severity":1,"message":"132","line":37,"column":36,"nodeType":"133","messageId":"134","endLine":37,"endColumn":38},{"ruleId":"131","severity":1,"message":"132","line":66,"column":24,"nodeType":"133","messageId":"134","endLine":66,"endColumn":26},{"ruleId":"131","severity":1,"message":"132","line":157,"column":60,"nodeType":"133","messageId":"134","endLine":157,"endColumn":62},{"ruleId":"131","severity":1,"message":"132","line":157,"column":144,"nodeType":"133","messageId":"134","endLine":157,"endColumn":146},{"ruleId":"122","severity":1,"message":"152","line":7,"column":43,"nodeType":"124","messageId":"125","endLine":7,"endColumn":61},{"ruleId":"135","severity":1,"message":"153","line":21,"column":8,"nodeType":"137","endLine":21,"endColumn":22,"suggestions":"154"},{"ruleId":"131","severity":1,"message":"132","line":26,"column":58,"nodeType":"133","messageId":"134","endLine":26,"endColumn":60},{"ruleId":"131","severity":1,"message":"132","line":26,"column":98,"nodeType":"133","messageId":"134","endLine":26,"endColumn":100},{"ruleId":"131","severity":1,"message":"132","line":34,"column":79,"nodeType":"133","messageId":"134","endLine":34,"endColumn":81},{"ruleId":"131","severity":1,"message":"132","line":82,"column":22,"nodeType":"133","messageId":"134","endLine":82,"endColumn":24},{"ruleId":"122","severity":1,"message":"155","line":7,"column":9,"nodeType":"124","messageId":"125","endLine":7,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":83,"column":22,"nodeType":"133","messageId":"134","endLine":83,"endColumn":24},{"ruleId":"122","severity":1,"message":"156","line":3,"column":18,"nodeType":"124","messageId":"125","endLine":3,"endColumn":29},{"ruleId":"122","severity":1,"message":"155","line":7,"column":9,"nodeType":"124","messageId":"125","endLine":7,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":81,"column":22,"nodeType":"133","messageId":"134","endLine":81,"endColumn":24},{"ruleId":"122","severity":1,"message":"156","line":3,"column":18,"nodeType":"124","messageId":"125","endLine":3,"endColumn":29},{"ruleId":"131","severity":1,"message":"132","line":86,"column":22,"nodeType":"133","messageId":"134","endLine":86,"endColumn":24},{"ruleId":"131","severity":1,"message":"132","line":31,"column":24,"nodeType":"133","messageId":"134","endLine":31,"endColumn":26},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Affix' is defined but never used.","'Drawer' is defined but never used.","'DesktopOutlined' is defined but never used.","'FileOutlined' is defined but never used.","'CloseCircleOutlined' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'inputChangeHandler', 'nameLessons', 'nameLessonsChangeHandler', and 'statusDays'. Either include them or remove the dependency array.","ArrayExpression",["159"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Modal' is defined but never used.","'nameChangeHandler' is assigned a value but never used.","'modalActive' is assigned a value but never used.","'setDirId' is assigned a value but never used.","'showModal' is assigned a value but never used.","'deleteDirectoryHandler' is assigned a value but never used.","'FolderOpenOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'faculty'. Either include it or remove the dependency array.",["160"],"'useParams' is defined but never used.","'getWeekType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [days, inputChangeHandler, nameLessons, nameLessonsChangeHandler, statusDays]",{"range":"165","text":"166"},"Update the dependencies array to be: [course, faculty, name]",{"range":"167","text":"168"},[25828,25834],"[days, inputChangeHandler, nameLessons, nameLessonsChangeHandler, statusDays]",[810,824],"[course, faculty, name]"]